def get_value(card):
    '''
    This function will take one argument "card", which is string for the poker 
    card. This function is used to get the value of the numbe part of the 
    poker, because there are some illogic character in the number part of the 
    "card", which are "A" means 1, "0" means 10, "J" means 11, "Q" means 12, 
    "K" means 13. This function will check the "card" has these illogic 
    character or not. If has, the function will return the real meaning of the 
    illogic character in int type; if doesn't have, the function will return 
    the number part in int type.
    '''
    # Check the illogic character
    if card[0] == "A":
        value = 1  # value is an int, means the number part of card
        
    elif card[0] == "0":
        value = 10
        
    elif card[0] == "J":
        value = 11
        
    elif card[0] == "Q":
        value = 12
        
    elif card[0] == "K":
        value = 13
    
    else:
        value = int(card[0])
    
    # Return the number part in int type
    return value


def check_discard_value(play_card, discard_pile):
    '''
    This function will take two arguments, one is a str "play_card", the card 
    that try to place onto discard pile; the other one is a list 
    "discard_pile",the pile is the card will placed on. The function will check
    the colour of card and the top card of discard pile are different or not 
    and the number of card and the top card of build pile are adjacent or not. 
    If both colour and numbe checkedas right, return Ture, otherwise, 
    return False.
    '''
    k_to_2_value = 13 - 2
    # discard is the top card of the discard pile
    discard = discard_pile[-1]
    
    # colour_check is to check the card colour and discard colour are different
    colour_check = False  # initially False
    
    # number_check is to check the card number and discard's are adjacent
    number_check = False  # initially False
    
    # get the number part of card in int type as card_value by function
    card_value = get_value(play_card)
    
    # get the number part of discard pile in int as discard_value by function
    discard_value = get_value(discard)
    
    # Check the number part are adjacent, the number_check become True if right
    if (abs(card_value - discard_value) == 1 or 
            abs(card_value - discard_value) == k_to_2_value):
        number_check = True
    
    # Check the colour part are different, the colour_check is True if right
    if play_card[1] in "SC" and discard[1] in "HD":
        colour_check = True
        
    elif play_card[1] in "HD" and discard[1] in "SC":
        colour_check = True
    
    # check both colour and number are right, return True
    if colour_check and number_check:
        return True
    
    # Otherwise, return False
    else:
        return False


def comp10001bo_match_discard(play_card, discard_pile, player_no, to_player_no,
                              from_hand=True):
    '''
    This function will take five arguments, one is a str "play_card", the card 
    that try to place onto discard pile; the second one is a list 
    "discard_pile", the pile that the card will placed on, the third one is the
    player number and the fourth one is the owner of discard pile, these to is 
    to check is the person play on his or her own discard or not, the last one 
    is from_hand, which is a bool, it is True if the play_card is from player's
    hand. This function will check the play is valid or invalid and return a 
    int, 0 is means the play is invalid; 1 is means the play is non-turn-ending
    play; 2 is means the play is valid turn-ending play.
    '''
    # The discard pile cannot occur "A" in any sitution, if play card is A,
    # return 0
    if play_card[0] == "A":
        
        return 0
    
    # Check the pile is empty or not
    elif discard_pile == []:
        
        # Check the card to start pile is from pile owner's hand
        if player_no == to_player_no and from_hand:
            
            return 2
        
        # If not, is invalid play
        else:
            
            return 0
    
    # Check the colour and number by function, if correct, is valid play
    elif check_discard_value(play_card, discard_pile):
        
        return 1
    
    # Check the illegal play is from hand if not is invalid play
    elif (check_discard_value(play_card, discard_pile) is False and 
          from_hand is False):
        
        return 0
    
    # Check it is illegal play and means turn-ending play
    elif check_discard_value(play_card, discard_pile) is False:
        
        return 2
    
    # All the other sitution is inlegal
    else: 
        
        return 0
